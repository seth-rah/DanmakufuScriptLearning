#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Test 01"]
#Text["Simple enemy + bullet tutorial"]

// Declare boss and boss spawn co-ordinates, as well as boss texture
let bossObj;
let bossX = 0;
let bossY = 0;
let imgBoss = GetCurrentScriptDirectory ~ "texture/cirno.png";

// Tell the game where the default bullets are stored, for us to make use of. Directory based on root of game folder.
#include "script/default_system/Default_ShotConst.txt"

@Initialize {
	
	// define a boss in bossObj and register it
	bossObj = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(bossObj);
	
	// variables expected are Object, texture
	ObjPrim_SetTexture(bossObj, imgBoss);
	
	//variables expected are Object, top, left, bottom, right
	ObjSprite2D_SetSourceRect(bossObj, 0, 0, 110, 110);
	
	//Define the center of the object as true center.
	ObjSprite2D_SetDestCenter(bossObj);
	
	//Set boss location, variables expected are Object, xlocation, ylocation and speed (0,0 is top(y) left(x))
	ObjMove_SetDestAtSpeed(bossObj, 192, 120, 5);
	
	//runs the created task mainTask
	mainTask;
}

@Event{

	// setting the boss timer and life
	alternative(GetEventType())
	
	// Boss Life Value
	case(EV_REQUEST_LIFE){
		SetScriptResult(1500);
	}
	
	// Boss Timer Value
	case(EV_REQUEST_TIMER){
		SetScriptResult(69);
	}
	
}

@MainLoop{
	
	//Find the boss X and Y co-ordinates and update it to a variable.
	//We do this in the main loop as it's always running.
	bossX = ObjMove_GetX(bossObj);
	bossY = ObjMove_GetY(bossObj);
	
	//Always yield mainloop. This tells the script that it needs to look for other tasks to perform before running it again.
	//If not yielded, your other tasks will not run, and the script will just repeat the current function.
	yield;
	
	
}

@Finalize{
	
}

//Yield is called for only a single frame, so you can put it in a loop to make it run for a longer period of time, 
//This will stop functions this gets called in from rerunning until the yield has passed.
//The expected variables for loop is the amount of times you want the loop to run. 60 frames == 1 second.
//'wait(1);' will function the same as 'yield;'
//When calling wait, you give a frame value for how long you want the task to wait.
function wait(w){
	loop(w){
		yield;
	}
}

//mainTask works as a switchboard for tasks we declare.
task mainTask{
	fire;
}

// firing bullets are based on 360 degrees, with 0 at the right, and 90 at the bottom, going clockwise to 359
task fire{
	loop{
		//variables expected are X spawn, y spawn, speed it travels, direction it goes in, bullet type based on the id or name of the shot in Default_ShotConst, frame delay before it shows up.
		CreateShotA1(bossX,bossY,5,90,14,0);

		//Always yield your loops or they will freeze the engine for not moving onto other tasks.
		//Here we're telling the fire task, that it should not create another bullet for another 60 frames
		wait(60);
	}
}